#! /bin/env python3

import enum
import glob
import os
import re
import shutil
import sys


def generateSlug(text, replacement="-"):
    text = re.sub("[^a-zA-Z0-9]", replacement, text)
    text = re.sub(replacement + "{1,}", replacement, text)
    text = text.strip(replacement)
    return text.lower()


def parseDate(iso):
    MONTHS = ["January", "Febuary", "March", "April", "May", "June", "July", "August", "October", "November", "December"]

    d = [int(x) for x in iso.split("-")]
    return (tuple(d), f"{MONTHS[d[1] - 1]} {d[2]}, {d[0]}")


# ========================================
#
# Ambergen markup.


class AmbergenMarkupTagDefinition:

    def __init__(self, export_mode='AUTO', begin=None, end=None,
                 is_region=False, is_exclusive=False, preserve=False,
                 html_mode='BOTH', html_tag=None, html_values={},
                 begin_func=None, end_func=None):

        self.export_mode = export_mode

        self.begin = begin
        self.end = end

        # Create a new region for this tag.
        self.is_region = is_region

        # Only this tag's end sequence will be recognized.
        self.is_exclusive = is_exclusive

        # If this tag ends upon a newline.
        self.is_single_line = begin and not end

        # If all characters (namely whitespace) are preserved for this
        # tag.
        self.preserve = preserve

        self.html_mode = html_mode
        self.html_tag = html_tag
        self.html_values = html_values

        self.begin_func = begin_func
        self.end_func = end_func

    def callBeginFunc(self, generator, indent=0):
        if self.begin_func:
            self.begin_func(generator, indent)

    def callEndFunc(self, generator):
        if self.end_func:
            self.end_func(generator)

    def shouldExport(self, inner=None):
        if self.export_mode == 'NEVER':
            return False
        elif self.export_mode == 'AUTO' and inner == "":
            return False

        return True

    def canPrune(self, inner=None):
        return (self.export_mode == 'AUTO' or self.export_mode == 'PRUNE') and inner == ""

    def export(self, inner=None, values=None, html_mode=None):
        if not self.shouldExport(inner):
            return ""

        values = values or self.html_values
        html_mode = html_mode or self.html_mode

        html = ""

        # Begin tag.
        if self.html_tag and html_mode in ['BOTH', 'BEGIN', 'SINGLE']:
            html += "<" + self.html_tag

            for name in sorted(values):
                if values[name] != None:
                    html += " " + name + "=\"" + values[name] + "\""

            html += "/>" if self.html_mode == 'SINGLE' else ">"

        # Inner.
        if inner:
            html += inner

        # End tag.
        if self.html_tag and html_mode in ['BOTH', 'END'] and self.html_mode != 'SINGLE':
            html += "</" + self.html_tag + ">"

        return html


class AmbergenMarkupRegion:

    def __init__(self, tag_name, definition, inner=""):
        self.tag_name = tag_name
        self.definition = definition

        self.inner = inner
        self.values = self.definition.html_values.copy()

    def __str__(self):
        s = {
            "tag_name": self.tag_name,
            "inner": self.inner,
            "values": self.values,
        }

        return str(s)

    def prependInner(self, text):
        self.inner = text + self.inner

    def appendInner(self, text):
        self.inner += text

    def hasInner(self):
        return self.inner != ""

    def shouldExport(self):
        return self.definition.shouldExport(self.inner)

    def canPrune(self, previous_region=None, next_region=None):
        return self.definition.canPrune(self.inner)

    def checkPrune(self, previous_region=None, next_region=None):
        if not self.canPrune():
            return False

        if previous_region and previous_region.canPrune():
            if previous_region.definition.html_tag == self.definition.html_tag:
                if previous_region.definition.html_mode == 'BEGIN' and self.definition.html_mode == 'END':
                    return True

        if next_region and next_region.canPrune():
            if next_region.definition.html_tag == self.definition.html_tag:
                if self.definition.html_mode == 'BEGIN' and next_region.definition.html_mode == 'END':
                    return True

        return False

    def export(self):
        return self.definition.export(inner=self.inner, values=self.values)


class AmbergenMarkupGenerator:

    # ========================================
    #
    # Tag callback functions.

    def tagBlockEnd(generator):
        generator.appendRegion("paragraph_end", offset=1)
        generator.appendRegion("paragraph")

    def tagHeadingBegin(generator, indent):
        heading_end = generator.source.find("\n", generator.ci)
        if heading_end == -1:
            heading_end = len(generator.source) - 1

        slug = generator.source[generator.ci:heading_end]
        slug = generateSlug(slug)

        generator.appendInner("<a id=\"" + slug + "\" href=\"#" + slug + "\">")

    def tagHeadingEnd(generator):
        generator.appendInner("</a>")

        generator.appendRegion("paragraph_end", offset=1)
        generator.appendRegion("section_end", offset=1)
        generator.appendRegion("section_begin", offset=1)
        generator.appendRegion("paragraph")

    def tagUrlEnd(generator):
        region = generator.getRegion(["link", "embed_image", "embed_image_pixel", "embed_image_small"])
        if not region:
            return

        url_region = generator.getRegion()

        if region.definition.html_tag == "img":
            region.values["src"] = url_region.inner
            region.values["alt"] = region.inner

            if region.tag_name != "embed_image_small":
                region.inner = "<span class=\"embed-caption\"><em>" + region.inner + "</em></span>"
        elif region.definition.html_tag == "a":
            region.values["href"] = url_region.inner

    def tagListItemBegin(generator, indent):
        diff = indent - generator.list_depth

        if diff > 0:
            for i in range(diff):
                generator.appendInner("<ul>")
        elif diff < 0:
            for i in range(-diff):
                generator.appendInner("</ul>")

        generator.list_depth += diff


    # ========================================
    #
    # Tag definition table.

    TAG_DEFINITIONS = {
        "normal": AmbergenMarkupTagDefinition(),

        # Paragraph.

        "paragraph": AmbergenMarkupTagDefinition(
            export_mode='PRUNE',
            html_mode='BEGIN', html_tag="p",
        ),
        "paragraph_end": AmbergenMarkupTagDefinition(
            export_mode='PRUNE',
            html_mode='END', html_tag="p"
        ),

        # Section.

        "section_begin": AmbergenMarkupTagDefinition(
            export_mode='ALWAYS',
            html_mode='BEGIN', html_tag="section",
        ),
        "section_end": AmbergenMarkupTagDefinition(
            export_mode='ALWAYS',
            html_mode='END', html_tag="section"
        ),

        # Heading.

        "heading": AmbergenMarkupTagDefinition(
            begin="#",
            is_region=True,
            html_tag="h2", html_values={ "class": "heading", },
            begin_func=tagHeadingBegin, end_func=tagHeadingEnd
        ),

        # Styling.

        "italic": AmbergenMarkupTagDefinition(
            begin="/", end="/",
            html_tag="em"
        ),
        "bold": AmbergenMarkupTagDefinition(
            begin="*", end="*",
            html_tag="strong"
        ),

        # Code.

        "code_block": AmbergenMarkupTagDefinition(
            begin="```", end="```",
            is_region=True, is_exclusive=True, preserve=True,
            html_tag="pre", html_values={ "class": "code-block", },
            end_func=tagBlockEnd
        ),
        "code_inline": AmbergenMarkupTagDefinition(
            begin="`", end="`",
            is_exclusive=True,
            html_tag="code", html_values={ "class": "code-inline", }
        ),

        # Embeds.

        "embed_image": AmbergenMarkupTagDefinition(
            export_mode='ALWAYS', begin="![", end="]",
            is_region=True, is_exclusive=True,
            html_mode='SINGLE', html_tag="img", html_values={ "class": "embed", },
            end_func=tagBlockEnd
        ),
        "embed_image_small": AmbergenMarkupTagDefinition(
            export_mode='ALWAYS', begin="!small[", end="]",
            is_region=True, is_exclusive=True,
            html_mode='SINGLE', html_tag="img", html_values={ "class": "embed-small", }
        ),
        "embed_image_pixel": AmbergenMarkupTagDefinition(
            export_mode='ALWAYS', begin="!pixel[", end="]",
            is_region=True, is_exclusive=True,
            html_mode='SINGLE', html_tag="img", html_values={ "class": "embed image-pixel", },
            end_func=tagBlockEnd
        ),

        # Links.

        "link": AmbergenMarkupTagDefinition(
            begin="[", end="]",
            is_region=True, is_exclusive=True,
            html_tag="a", html_values = { "class": "link" }
        ),

        # URL specifier.

        "url": AmbergenMarkupTagDefinition(
            export_mode='NEVER', begin="(", end=")",
            is_region=True, is_exclusive=True,
            end_func=tagUrlEnd
        ),

        # Lists.

        "list_item": AmbergenMarkupTagDefinition(
            begin="-",
            html_tag="li",
            begin_func=tagListItemBegin,
        ),
    }

    # ========================================
    #
    # Constructor.

    def __init__(self, source_path, only_metadata=False):
        self.source_path = source_path
        self.only_metadata = only_metadata

        self.metadata_length = 0
        self.metadata = {
            "title": "Title",
            "author": "Author",
            "date": "0000-01-01",
            "template": "article.html",
            "static": "",
        }

        self.date = (0, 1, 1)

        self.regions = []

        self.source = ""
        self.html = ""

        self.parse()

    # ========================================
    #
    # Preliminary metadata parsing.

    def parse(self):
        f = open(self.source_path, "r")
        self.source = f.read()
        f.close()

        self.parseMetadata()

        if not self.only_metadata:
            self.parseMarkup()
            self.export()

    def parseMetadata(self):
        SEPARATOR = "---"

        self.metadata_length = self.source.find(SEPARATOR)
        if self.metadata_length == -1:
            self.metadata_length = len(self.source)

        lines = self.source[:self.metadata_length].split("\n")
        for line in lines:
            line = line.strip().split(" ", 1)
            if len(line) > 1:
                self.metadata[line[0].strip()] = line[1].strip()
            elif len(line) > 0:
                self.metadata[line[0].strip()] = "empty"

        self.metadata_length += len(SEPARATOR)

        # Convert date format.
        self.date, self.metadata["date"] = parseDate(self.metadata["date"])

        # Unset metadata values for static pages.
        if self.metadata["static"] == "empty":
            self.metadata["author"] = ""
            self.metadata["date"] = ""

    # ========================================
    #
    # Region.

    def appendRegion(self, tag_name="normal", offset=0):
        index = max(len(self.regions) - offset, 0)

        # Remove empty regions.
        index_p = index - 1
        if index_p >= 0:
            region = self.regions[index_p]
            if region and not region.shouldExport():
                del self.regions[index_p]
                index = max(index - 1, 0)

        self.regions.insert(index, AmbergenMarkupRegion(tag_name, self.TAG_DEFINITIONS[tag_name]))

        return self.regions[index]

    def deleteRegion(self, region):
        del region

    def getRegion(self, tag_names=None, offset=0):
        if not tag_names:
            if len(self.regions) > 0:
                return self.regions[-(offset + 1)]
            else:
                return None

        for i in range(len(self.regions) - (offset + 1), 0, -1):
            region = self.regions[i]
            if region.tag_name in tag_names:
                return region

        return None

    def prependInner(self, html, region=None):
        region = region or self.regions[-1]
        region.prependInner(text)

    def appendInner(self, text, region=None):
        region = region or self.regions[-1]
        region.appendInner(text)

    # ========================================
    #
    # Tag.

    def beginTag(self, tag_name):
        self.active_tags[tag_name] = True

        tag = self.TAG_DEFINITIONS[tag_name]

        if tag.is_exclusive:
            self.exclusive_tag = tag_name

        if tag.is_region:
            self.appendRegion(tag_name)
            tag.callBeginFunc(self, self.line_indent // 2)
        else:
            tag.callBeginFunc(self, self.line_indent // 2)
            self.appendInner(tag.export(html_mode='BEGIN'))

    def endTag(self, tag_name):
        self.active_tags[tag_name] = False

        tag = self.TAG_DEFINITIONS[tag_name]

        if tag.is_exclusive:
            self.exclusive_tag = None

        if tag.is_region:
            tag.callEndFunc(self)
            self.appendRegion()
        else:
            self.appendInner(tag.export(html_mode='END'))
            tag.callEndFunc(self)


    # ========================================
    #
    # Main markup parsing.

    def nextCh(self, count=1):
        self.ci += count
        if self.ci >= len(self.source):
            return False

        self.ch = self.source[self.ci]
        return True

    def parseMarkup(self):
        self.active_tags = { x: False for x in self.TAG_DEFINITIONS }
        self.exclusive_tag = None

        self.escape = -1

        self.ci = self.metadata_length - 1
        self.ch = None

        self.empty_line_count = 0
        # How many non-whitespace characters in this line so far.
        self.line_solid = 0
        # Indent spaces. tab = 2, space = 1. Do `line_indent // 2` for
        # the actual indent level.
        self.line_indent = 0

        self.list_depth = -1

        self.appendRegion("paragraph")

        while self.nextCh():
            latest_region = self.getRegion()

            if self.escape >= 0:
                self.escape -= 1

            if not latest_region.definition.preserve:
                # Escaping.
                if self.ch == "\\" and self.escape < 0:
                    self.escape = 1
                    continue

                # Newline/whitespace handling.
                if self.ch == "\n":
                    if self.list_depth >= 0:
                        self.tagListItemBegin(-1)
                        self.list_depth = -1

                    if self.empty_line_count == 0 and latest_region.hasInner():
                        self.appendInner(" ")
                    elif self.empty_line_count == 1:
                        self.appendRegion("paragraph_end")
                        self.appendRegion("paragraph")

                    self.empty_line_count += 1
                    self.column = 0
                    self.line_solid = 0
                    self.line_indent = 0

                    # Handle single-line tags.
                    for tag_name in self.TAG_DEFINITIONS:
                        if self.active_tags[tag_name] and self.TAG_DEFINITIONS[tag_name].is_single_line:
                            self.endTag(tag_name)

                    continue

                # Whitespace is ignored.
                if self.ch in " \t\r" and self.empty_line_count > 0:
                    self.column = 0

                    if self.ch == " ":
                        self.line_indent += 1
                    elif self.ch == "\t":
                        self.line_indent += 2

                    continue

                self.line_solid += 1
                self.empty_line_count = 0

                if self.line_solid == 1:
                    if self.source.startswith("---", self.ci):
                        self.nextCh(2)
                        self.appendInner("<hr>")
                        continue

            if self.escape < 0:
                # Begin tags.
                tag_begin = None
                tag_begin_name = None
                for tag_name in self.TAG_DEFINITIONS:
                    tag = self.TAG_DEFINITIONS[tag_name]

                    if tag.is_single_line and self.line_solid > 1:
                        continue

                    if not self.active_tags[tag_name] and tag.begin and self.source.startswith(tag.begin, self.ci):
                        tag_begin = tag
                        tag_begin_name = tag_name
                        break

                if tag_begin and not self.exclusive_tag:
                    self.nextCh(len(tag_begin.begin) - 1)
                    self.beginTag(tag_begin_name)
                    continue

                # End tags.
                tag_end = None
                tag_end_name = None
                for tag_name in self.TAG_DEFINITIONS:
                    tag = self.TAG_DEFINITIONS[tag_name]
                    if self.active_tags[tag_name] and tag.end and self.source.startswith(tag.end, self.ci):
                        tag_end = tag
                        tag_end_name = tag_name
                        break

                if tag_end and (not self.exclusive_tag or tag_end_name == self.exclusive_tag):
                    self.nextCh(len(tag_end.end) - 1)
                    self.endTag(tag_end_name)
                    continue

            # Insert literal character.
            if self.ch == "<":
                self.appendInner("&lt;")
            elif self.ch == ">":
                self.appendInner("&gt;")
            else:
                self.appendInner(self.ch)

        self.tagListItemBegin(-1)
        self.appendRegion("paragraph_end")
        self.appendRegion("section_end")

    def export(self):
        tag_counts = {}

        for i in range(len(self.regions)):
            region = self.regions[i]

            if not region.shouldExport():
                continue

            # Check if region should be pruned.
            if i > 0: previous_region = self.regions[i - 1]
            else: previous_region = None

            if i < (len(self.regions) - 1): next_region = self.regions[i + 1]
            else: next_region = None

            if region.checkPrune(previous_region, next_region):
                continue

            # Prune unnecessary `END` tags.
            html_tag = region.definition.html_tag
            if region.definition.html_mode == 'BEGIN':
                if html_tag in tag_counts:
                    tag_counts[html_tag] += 1
                else:
                    tag_counts[html_tag] = 0
            elif region.definition.html_mode == 'END':
                if not html_tag in tag_counts or tag_counts[html_tag] < 1:
                    tag_counts[html_tag] = 0
                    continue
                else:
                    tag_counts[html_tag] -= 1

            # Export region.
            print(region)
            self.html += region.export()


# ========================================
#
# Generator content.


class GeneratorContentType(enum.Enum):

    HTML = enum.auto()
    AGM = enum.auto()
    IMAGE = enum.auto()


class GeneratorContent:

    def __init__(self, source_path, build_path, content_type, data):
        self.source_path = source_path
        self.build_path = build_path

        self.content_type = content_type
        self.data = data

    def changeExt(self, ext):
        self.build_path = os.path.splitext(self.build_path)[0] + ext

    def build(self, generator):
        data = self.data

        if self.content_type == GeneratorContentType.HTML:
            data = generator.generateTemplatedHtml(self.data)
        elif self.content_type == GeneratorContentType.AGM:
            self.changeExt(".html")
            data = generator.generateTemplatedHtml(
                generator.getTemplate(self.data.metadata["template"]),
                metadata=self.data.metadata,
                body=self.data.html
            )

        try: os.makedirs(os.path.dirname(self.build_path))
        except: pass

        f = open(self.build_path, "wb" if type(self.data) == bytes else "w")
        f.write(data)
        f.close()

# ========================================
#
# Generator.


class Generator:

    def __init__(self, source_dir="", build_dir="public"):
        self.source_dir = os.path.abspath(source_dir)
        self.build_dir = os.path.abspath(build_dir)

        print(f"Source dir: '{self.source_dir}'")
        print(f"Build dir: '{self.source_dir}'")

        self.assets_dir = os.path.join(self.source_dir, "assets")
        self.content_dir = os.path.join(self.source_dir, "content")
        self.templates_dir = os.path.join(self.source_dir, "templates")

        self.templates = {}
        self.content = {}
        self.listings = {}

    def getBuildPath(self, path, source_dir=None):
        source_dir = source_dir or self.content_dir

        path = path[len(source_dir) + 1:]
        path = os.path.join(self.build_dir, path)

        return path

    # ========================================
    #
    # Templates.

    def loadTemplates(self):
        print("Loading templates...")

        template_paths = glob.glob(os.path.join(self.templates_dir, "**"), recursive=True)

        for template_path in template_paths:
            if os.path.isdir(template_path):
                continue

            template_name = template_path[len(self.templates_dir) + 1:]

            print(f"Loading {template_path} as {template_name}...")

            f = open(template_path, "r")
            self.templates[template_name] = f.read()
            f.close()

    def getTemplate(self, name):
        t = self.templates.get(name)
        if t:
            return t

        t = f"<span>Template {name} not found</span>"

        return t

    def generateTemplatedHtml(self, source, metadata={}, body=""):
        class AutoDict(dict):
            def __missing__(self, key):
                return "{" + key + "}"

        source = source.format_map(AutoDict(
            header=self.getTemplate("header.html"),
            footer=self.getTemplate("footer.html")
        ))

        source = source.format_map(AutoDict(
            **self.listings
        ))

        source = source.format_map(AutoDict(
            body=body,
            title=metadata.get("title", ""),
            author=metadata.get("author", ""),
            date=metadata.get("date", ""),
        ))

        return source

    # ========================================
    #
    # Content handling.

    # Load content and parse markup etc.
    def loadContent(self):
        print("Loading content...")

        content_paths = glob.glob(os.path.join(self.content_dir, "**"), recursive=True)

        for content_path in content_paths:
            if os.path.isdir(content_path):
                continue

            print(f"Loading {content_path}...")

            build_path = self.getBuildPath(content_path)
            ext = os.path.splitext(build_path)[1]

            content_type = None
            data = None

            if ext == ".html":
                content_type = GeneratorContentType.HTML
                f = open(content_path, "r")
                data = f.read()
                f.close()
            elif ext == ".agm":
                content_type = GeneratorContentType.AGM
                data = AmbergenMarkupGenerator(content_path)
            elif ext in [".png", ".jpg"]:
                content_type = GeneratorContentType.IMAGE
                f = open(content_path, "rb")
                data = f.read()
                f.close()
            else:
                print(f"Unknown content extension {ext}")
                continue

            self.content[content_path] = GeneratorContent(content_path, build_path, content_type, data)


    # Build content. This must occur after listings are generated
    # since HTML template expansion which happens here will require
    # the listings.
    def buildContent(self):
        print("Building content...")

        for content_path in self.content:
            print(f"Building {content_path}...")

            self.content[content_path].build(self)

    # ========================================
    #
    # Content listings.

    def generateListingHtml(self, listing_dir, listing_name):
        html = ""

        content_dirs = glob.glob(os.path.join(listing_dir, "**"))

        # [(index_paths, dir), ...]
        content_listing = []

        # Get list of valid index files to list.
        for content_dir in content_dirs:
            if not os.path.isdir(content_dir):
                continue

            content_index_path = os.path.join(content_dir, "index.agm")
            if content_index_path in self.content:
                content_listing.append((content_index_path, content_dir))

        # Sort content chronologically.
        content_listing.sort(key=lambda l: self.content[l[0]].data.date, reverse=True)

        # Then actually emit the HTML for the listing.
        for content_index_path, content_dir in content_listing:
            content = self.content[content_index_path]

            content_dir_rel = content_dir[len(self.content_dir):]
            print(f"Adding {content_dir_rel}")

            html += "<div class=\"listing-item\">"
            html += "<div>"
            html += "<a class=\"link\" href=\"" + content_dir_rel + "\">"
            html += content.data.metadata["title"]
            html += "</a>"
            html += "</div>"
            html += "<div class=\"listing-item-metadata\">"
            html += content.data.metadata["date"]
            html += "</div>"
            html += "</div>"

        return html

    def generateListings(self):
        print("Generating content listings...")

        listing_dirs = glob.glob(os.path.join(self.content_dir, "**"))

        for listing_dir in listing_dirs:
            if not os.path.isdir(listing_dir):
                continue

            listing_name = "listing_" + generateSlug(listing_dir[len(self.content_dir) + 1:], "_")

            print(f"Generating listing for {listing_name}...")

            self.listings[listing_name] = self.generateListingHtml(listing_dir, listing_name)

    # ========================================
    #
    # Main build entrypoint.

    def build(self):
        print("Initiating build...")

        self.loadTemplates()
        self.loadContent()
        self.generateListings()

        # Copy assets/ tree.
        shutil.copytree(self.assets_dir, os.path.join(self.build_dir, "assets"), dirs_exist_ok=True)

        self.buildContent()

# ========================================
#
# Command-line utility usage.

if __name__ == "__main__":
    SOURCE_DIR = os.path.curdir
    BUILD_DIR = os.path.join(SOURCE_DIR, "public")

    SERVER_HOSTNAME = "0.0.0.0"
    SERVER_PORT = 8080

    # ========================================
    #
    # Helpers.

    def doMakeSourceDir(path):
        try:
            os.makedirs(os.path.join(SOURCE_DIR, path))
        except FileExistsError:
            pass

    def doMakeSourceFile(path, content=""):
        try:
            f = open(os.path.join(SOURCE_DIR, path), "x")
            f.write(content)
            f.close()
        except FileExistsError:
            pass

    # ========================================
    #
    # Commands.

    def commandBuild():
        ag = Generator(source_dir=SOURCE_DIR, build_dir=BUILD_DIR)
        ag.build()

    def commandInit():
        INITIAL_CSS = "\n".join([
            "",
            "body {",
            "  font-family: sans-serif;"
            "}",
            "",
        ])

        INITIAL_AGM_ARTICLE = "\n".join([
            "",
            "author Author",
            "template article.html",
            "---",
            "",
        ])

        INITIAL_HTML_INDEX = "\n".join([
            "",
            "<!DOCTYPE html>",
            "<html lang=\"en\">",
            "  <head>",
            "    <meta charset=\"utf-8\" />",
            "    <title>{title}</title>",
            "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />",
            "    <link rel=\"stylesheet\" href=\"/assets/style/main.css\" />",
            "  </head>",
            "  <body>",
            "    <p>Index</p>",
            "{listing_articles}",
            "  </body>",
            "</html>",
            "",
        ])

        INITIAL_HTML_404 = "\n".join([
            "",
            "<!DOCTYPE html>",
            "<html lang=\"en\">",
            "  <head>",
            "    <meta charset=\"utf-8\" />",
            "    <title>{title}</title>",
            "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />",
            "    <link rel=\"stylesheet\" href=\"/assets/style/main.css\" />",
            "  </head>",
            "  <body>",
            "    <div class=\"404-div\"><p class=\"404-text\">404 page not found</p></div>",
            "  </body>",
            "</html>",
            "",
        ])

        INITIAL_HTML_TEMPLATE = "\n".join([
            "",
            "<!DOCTYPE html>",
            "<html lang=\"en\">",
            "  <head>",
            "    <meta charset=\"utf-8\" />",
            "    <title>{title}</title>",
            "    <meta name=\"author\" content=\"{author}\" />",
            "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />",
            "    <link rel=\"stylesheet\" href=\"/assets/style/main.css\" />",
            "  </head>",
            "  <body>",
            "{body}",
            "  </body>",
            "</html>",
            "",
        ])

        INITIAL_HTML_HEADER = "\n".join([
            "",
            "<header>",
            "</header>",
            "",
        ])

        INITIAL_HTML_FOOTER = "\n".join([
            "",
            "<footer>",
            "</footer>",
            "",
        ])

        doMakeSourceDir("assets")
        doMakeSourceDir("assets/images")
        doMakeSourceDir("assets/style")
        doMakeSourceFile("assets/style/main.css", INITIAL_CSS)
        doMakeSourceDir("content")
        doMakeSourceFile("content/index.html", INITIAL_HTML_INDEX)
        doMakeSourceFile("content/404.html", INITIAL_HTML_404)
        doMakeSourceDir("content/articles")
        doMakeSourceDir("content/about")
        doMakeSourceFile("content/about/index.agm", INITIAL_AGM_ARTICLE)
        doMakeSourceDir("templates")
        doMakeSourceFile("templates/article.html", INITIAL_HTML_TEMPLATE)
        doMakeSourceFile("templates/header.html", INITIAL_HTML_HEADER)
        doMakeSourceFile("templates/footer.html", INITIAL_HTML_FOOTER)

    def commandServe():
        from http.server import SimpleHTTPRequestHandler, HTTPServer

        class RequestHandler(SimpleHTTPRequestHandler):
            def __init__(self, *args, **kwargs):
                super().__init__(*args, directory=BUILD_DIR, **kwargs)

        print(f"Starting server on {SERVER_HOSTNAME}:{SERVER_PORT}...")
        server = HTTPServer((SERVER_HOSTNAME, SERVER_PORT), RequestHandler)
        print("Server started, press Ctrl-C to stop")

        try:
            server.serve_forever()
        except KeyboardInterrupt:
            pass

        server.server_close()
        print("Server stopped")

    # ========================================
    #
    # Command determination.

    if len(sys.argv) > 1:
        COMMAND = sys.argv[1].lower().strip()
    else:
        COMMAND = "build"

    # Run command.
    if COMMAND == "build":
        commandBuild()
    elif COMMAND == "init":
        commandInit()
    elif COMMAND == "serve":
        commandBuild()
        commandServe()
    else:
        print(f"Unknown command '{COMMAND}'")
